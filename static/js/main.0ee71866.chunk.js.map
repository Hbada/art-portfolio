{"version":3,"sources":["img/Emily_Game.png","img/Lindsay_Game.png","img/Lamp.png","img/Cookie_Eyes.jpg","img/Blue_Cat.png","img/Lake_Landscape.jpg","img/Male_Sad.jpg","img/Office_Building.jpg","img/Savannah_Tree.png","Artcard.js","Gallery.js","Artcardwide.js","Gallerywide.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Artcard","className","this","props","title","src","img","alt","category","description","Component","Emily","require","Lindsay","Lamp","Gallery","id","artwork","map","a","defaultProps","Artcardwide","Cookie_eyes","Blue_cat","Lake_landscape","Male_sad","Office_building","Savannah_tree","Gallerywide","artworkwide","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ee71866.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Emily_Game.69e008d1.png\";","module.exports = __webpack_public_path__ + \"static/media/Lindsay_Game.b078e9f0.png\";","module.exports = __webpack_public_path__ + \"static/media/Lamp.fdc84376.png\";","module.exports = __webpack_public_path__ + \"static/media/Cookie_Eyes.06fb1150.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Blue_Cat.d8eb51d9.png\";","module.exports = __webpack_public_path__ + \"static/media/Lake_Landscape.068c6e2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Male_Sad.057c96b2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Office_Building.84d7aff4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Savannah_Tree.c0a90fa3.png\";","import React, {Component} from 'react';\n\nclass Artcard extends Component {\n  render() {\n    return (\n      <div className=\"Artcard\">\n        <h3>{this.props.title}</h3>\n        <img src={this.props.img} alt={this.props.title} />\n        <div className=\"ArtcardDetails\">\n          <p>{this.props.category}</p>\n          <hr />\n          <p>{this.props.description}</p>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Artcard;\n","import React, {Component} from 'react';\nimport Artcard from './Artcard';\nimport './Gallery.css';\n\n// set up images for use in Artcards\nconst Emily = require('./img/Emily_Game.png');\nconst Lindsay = require('./img/Lindsay_Game.png');\nconst Lamp = require('./img/Lamp.png');\n\nclass Gallery extends Component {\n  static defaultProps = {\n    artwork : [\n      { id: 1, title: \"Emily game character\", img: Emily, category: \"Procreate, raster illustration\", description: \"Main character in educational story about diabetes\" },\n      { id: 2, title: \"Lindsay game character\", img: Lindsay, category: \"Procreate, raster illustration\", description: \"Sidekick character in educational story about diabetes\" },\n      { id: 3, title: \"Lamp\", img: Lamp, category: \"Affinity Designer, vector illustration\", description: \"Lamp for cartoon and poster backgrounds\" }\n    ]\n  };\n  render() {\n    return (\n      <div className=\"Gallery\">\n        <div id=\"Artwork-cards\">\n          {this.props.artwork.map((a) => (\n            <Artcard id={a.id} title={a.title} img={a.img} category={a.category} description={a.description} />\n          ))}\n        </div>\n      </div>\n    )\n  };\n};\n\nexport default Gallery;\n","import React, {Component} from 'react';\n\nclass Artcardwide extends Component {\n  render() {\n    return (\n      <div className=\"Artcard-wide\">\n        <h3>{this.props.title}</h3>\n        <img src={this.props.img} alt={this.props.title} />\n        <div className=\"ArtcardDetails\">\n          <p>{this.props.category}</p>\n          <hr />\n          <p>{this.props.description}</p>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Artcardwide;\n","import React, {Component} from 'react';\nimport Artcardwide from './Artcardwide';\nimport './Gallery.css';\n\n// set up images for use in Artcardwide\nconst Cookie_eyes = require('./img/Cookie_Eyes.jpg');\nconst Blue_cat = require('./img/Blue_Cat.png');\nconst Lake_landscape = require('./img/Lake_Landscape.jpg');\nconst Male_sad = require('./img/Male_Sad.jpg');\nconst Office_building = require('./img/Office_Building.jpg');\nconst Savannah_tree = require('./img/Savannah_Tree.png');\n\nclass Gallerywide extends Component {\n  static defaultProps = {\n    artworkwide : [\n      { id: 1, title: \"Cookie eyes comic story\", img: Cookie_eyes, category: \"Procreate, cartoon\", description: \"3-panel comic with humour\"},\n      { id: 2, title: \"Blue cat character\", img: Blue_cat, category: \"Affinity Designer, vector illustration\", description: \"Cat character\"},\n      { id: 3, title: \"Lake landscape\", img: Lake_landscape, category: \"Affinity Designer, vector illustration, flat illustration\", description: \"Landscape of lake using basic shapes\"},\n      { id: 4, title: \"Sad character sketch\", img: Male_sad, category: \"Inktense coloured pencil, cartoon\", description: \"Sad character sketch\"},\n      { id: 5, title: \"Office building sketch\", img: Office_building, category: \"Watercolour marker, drawing\", description: \"Watercolour sketch of office building\"},\n      { id: 6, title: \"Savanna tree\", img: Savannah_tree, category: \"Affinity Designer, vector illustration\", description: \"Tree illustration\"}\n    ]\n  };\n  render() {\n    return (\n      <div className=\"Gallery\">\n        <div id=\"Artwork-cards\">\n          {this.props.artworkwide.map((a) => (\n            <Artcardwide id={a.id} title={a.title} img={a.img} category={a.category} description={a.description} />\n          ))}\n        </div>\n      </div>\n    )\n  };\n};\n\nexport default Gallerywide;\n","import React, { Component } from 'react';\nimport Gallery from './Gallery';\nimport Gallerywide from './Gallerywide';\nimport './App.css';\n\nfunction App() {\n  // built with npx create-react-app\n  // using Colt Steele React course techniques\n  // for GitHub Pages deployment\n  // create-react-app generates as a function while Colt taught class-based App\n  // either way is okay\n\n  return (\n    <div className=\"App\">\n      <h1>Heidi Bada | Cartoon artist</h1>\n      <h2>Victoria, B.C.</h2>\n      <Gallery />\n      <Gallerywide />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}